This file must be deleted BEFORE the last commit.

On peux peut-être reprendre le système de combat de "RPG maker VX Ace"
Mini interpréteur de commandes pour le debug ? - si besoin dans un sfThread

Seront défini dans les fichiers config :
Les textures
Les sons
La musique
Les entités
La majorité des éléments de la map (en coordonnées de préférence)
Les compétences
Les caractéristiques liées au joueur
Peut-être aussi les menus (à voir)
UTILISEZ DES COMMENTAIRES ET DES SAUT DE LIGNES DANS LES FICHIERS DE CONFIG
(Une ligne vide ou une ligne commençant par '#' ne sera pas interprétée)
(Les ':' sont des séparateurs)
Fichiers .conf et .func - utilisez un espace comme séparateur
SEUL le fichier "config.init" est exécuté AVANT les fichiers "*.func"

Fichiers configs : 3 extensions différentes :
.txt -> fichier de configuration interne (interprété spécifiquement)
.conf -> fichier de configuration à exécuter
.func -> fichier définissant une fonction pouvant être appellé ailleur

Fonctions :
- call filename arg1 arg2 arg3 - appelle la fonction avec des arguments
- @1 sera remplacé par l'argument 1

Arguments :
- @ signifie remplacer par l'argument n° (uniquemend dans les fichiers ".func")
- $ signifie parcourir si en début d'argument
- = signifier évaluer l'argument (avec my_getnbr)
- & signifie remplacer par la fonction
- { signifie remplacer par un pointeur vers une psuedo-structure (voir section Dynamic structures)

Parcourir :
- Utilisez '.' comme séparateur (exemple : entity.mob1.health)
- '+' pour un décalage (exemple : player.pos.+16)
- '[' pour un décalage avec déréférencement (exemple : entitylists.[2]) (ptr-only)
- '$' pour une position dans la liste chainée (exemple : entity.$3)
- '@struct_type.key' pour caster en une structure et chercher un argument (sans le déréférencer)

Conditions :
- if (long *) <operation> (long *) &<command_name> <command_args>
- operation : '<', '>' ou '=', pouvant être suivi de '!' pour inverser le résultat du test (exemple : <! équivaut à >= en C)
- (long *) : pointeur vers un long, le long pointé sera utilisé pour le test
- command_name : nom de la commande a exécuter si le test est vrai
- command_args : arguments à envoyer à la commande

Particle system :
    Apparition
    - ponctuelle
    - axiale dirigée en X ou Y
    Trajectoire
    - attraction par un point et/ou directionnelle
    - plage de force d'éloignement dirigée aléatoirement
    Constitution
    - sfVertex : triangles
    - plage de coloration (couleur aléatoire dans cette plage)
    Effets
    - aucun
    Densité
    - particules par tic

Display order :
Si le point bas gauche (collider) est en bas à gauche du point haut droit (collider) du suivant : les inverser

Save/load :
    mapname.dat
        (u_char) nb_entities
            (u_short) entity_id
            (u_short) sizeof_datas
            (raw) datas
    tags.dat
        (u_short) tag_id
        (u_short) tag_size
        (raw) datas
    player.dat
        # Undefined now

Entities :
    name texture size_x size_y frames_x frames_y health frame_delay_cs speed_pps func_update func_new func_destroy func_load func_save

Dynamic structures :
    Permet de créer une structure et de renvoyer un pointeur vers celle-ci.
    Le format des structures dynamiques est une succession type:valeur séparée par '|'.
    Exemple : {long:=32|ptr:$textures.player|float:~f3.0|double:~d-3.14159}
    Tous les flags disponible pour les arguments sont aussi disponibles ici, à l'exception des structures dynamiques.
    Flags supplémentaires :
    ~f : float
    ~d : double
    ATTENTION : les structures dynamiques ne sont pas disponibles dans les fonctions
    ATTENTION : ne pas utiliser plus d'une structure dynamique par ligne
    ATTENTION : pour qu'une structure soit persistante, rajoutez '!' après '}', suivi de la taille de la structure dynamique en octects
